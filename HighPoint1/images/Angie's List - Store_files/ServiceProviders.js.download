'use strict';

define(function (require) {
  var AL = require('al');
  var ServiceProviderMetrics = require('models/ServiceProviderMetrics');
  var $ = require('jquery');
  var ComparatorUtils = require('utils/comparatorUtils');

  function getCity(s) {
    return ((s.get('primaryAddress') || {}).city || {}).name || '';
  }
  function getState(s) {
    return ((s.get('primaryAddress') || {}).region || {}).name || '';
  }

  function getNumReviews(s) {
    var metrics = s.get('metrics');
    return metrics ? metrics.get('numReviews') : null;
  }

  function getGPA(s) {
    var metrics = s.get('metrics');
    return metrics ? metrics.get('overallGpa') : null;
  }

  var sortFunctions = {
    alid: function alid(a, b) {
      return ComparatorUtils.compare(Number(a.get('alId')), Number(b.get('alId')));
    },
    name: function name(a, b) {
      return ComparatorUtils.compare(a.get('name').toLowerCase(), b.get('name').toLowerCase());
    },
    city: function city(a, b) {
      return ComparatorUtils.compare(getCity(a).toLowerCase(), getCity(b).toLowerCase()) || ComparatorUtils.compare(getState(a).toLowerCase(), getState(b).toLowerCase());
    },
    grade: function grade(a, b) {
      return -ComparatorUtils.compare(getGPA(a), getGPA(b));
    },
    reviews: function reviews(a, b) {
      return -ComparatorUtils.compare(getNumReviews(a), getNumReviews(b));
    }
  };

  /* eslint no-param-reassign:0 */
  var Model = AL.Model.extend({
    initialize: function initialize(options) {
      if (options) {
        this.id = options.id;
      }
    },

    parse: function parse(data) {
      // TODO: remove once endpoint returns the formattedAddress.
      if (data.primaryAddress) {
        var primaryAddress = data.primaryAddress;
        data.formattedAddress = (primaryAddress.addressFirstLine || {}) + ', ' + ((primaryAddress.city || {}).name || '') + ', ' + ((primaryAddress.region || {}).abbreviation || '') + ' ' + primaryAddress.postalCode;
      }

      return AL.Model.prototype.parse.call(this, data);
    },

    url: function url() {
      return AL.apiPath + '/service_providers/' + this.id;
    }
  });

  return {
    Model: Model,
    Collection: AL.Collection.extend({
      url: AL.apiPath + '/users/current/service_providers',
      model: Model,
      comparator: function comparator(item) {
        return Number(item.get('alId'));
      },
      sortByField: function sortByField(field) {
        if (sortFunctions[field]) {
          this.comparator = sortFunctions[field];
          this.sort(sortFunctions[field]);
        }
      },
      fetchMetrics: function fetchMetrics() {
        var self = this;
        var fetchPromiseList = self.map(function (sp) {
          var metrics = new ServiceProviderMetrics.Model({
            serviceProviderId: sp.id
          });

          return metrics.fetch().then(function () {
            sp.set('metrics', metrics);
          });
        });
        return $.when.apply($, fetchPromiseList);
      }
    })
  };
});