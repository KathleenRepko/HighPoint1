// Documentation for Sanitation can be found at:
// https://angieslist.atlassian.net/wiki/display/SE/Data+Sanitation
define(function (require) {
  /* eslint no-var:0 */
  var _ = require('underscore');

  return {
    sanitize: function (data, rules) {
      // Determine if sanitation rules are applied and process them
      if (rules) {
        var self = this;

        // for each defined rule set
        _.forOwn(rules, function (value, attr) {
          // for each sanitizer on that rule
          _.forOwn(rules[attr], function (v, key) {
            if (self.sanitizers[key]) {
              var attrValue = _.get(data, attr);
              // if there is a value for the rule that needs sanitized
              if (!_.isUndefined(attrValue) && attrValue !== null) {
                // apply the sanitizer to the value and set back to the field
                _.set(data, attr,
                  self.sanitizers[key](attrValue, attr, v, data));
              }
            }
          });
        });
      }
    },

    sanitizers: {
      // Collapses multiples whitespace characters in text into a single space
      compactSpace: function (value, attr, customValue, model) {
        if (!customValue || !_.isString(value)) {
          return value;
        }
        return value.replace(/\s\s+/g, ' ');
      },
      // Trims whitespace characters from the beginning and end of text
      trim: function (value, attr, customValue, model) {
        if (!customValue || !_.isString(value)) {
          return value;
        }
        return value.replace(/^\s+|\s+$/g, '');
      },
      // Trims whitespace characters from the beginning of text
      ltrim: function (value, attr, customValue, model) {
        if (!customValue || !_.isString(value)) {
          return value;
        }
        return value.replace(/^\s+/, '');
      },
      // Trims whitespace characters from the end of text
      rtrim: function (value, attr, customValue, model) {
        if (!customValue || !_.isString(value)) {
          return value;
        }
        return value.replace(/\s+$/, '');
      },
      // Converts and empty string to nothing
      removeEmptyString: function (value, attr, customValue, model) {
        if (!customValue) {
          return value;
        }
        return value === '' ? undefined : value;
      },
      // Converts a string to a boolean value
      convertToBoolean: function (value, attr, customValue, model) {
        if (!customValue) {
          return value;
        }
        return !!value;
      },
      // Converts a string to a numeric value
      convertToNumber: function (value, attr, customValue, model) {
        if (!customValue || !_.isString(value)) {
          return value;
        }

        var num = _.parseInt(value);
        return (!_.isNumber(num) && num !== null && num !== undefined) ?
          undefined : num;
      },
      // Converts a object to a string
      convertToString: function (value, attr, customValue, model) {
        if (!customValue) {
          return value;
        }
        return (!_.isString(value) && value !== null && value !== undefined) ?
          value.toString() : value;
      },
      // Prepends the protocol to a URL string
      urlNormalizer: function (value, attr, customValue, model) {
        if (!customValue) {
          return value;
        }

        var v = (!_.isString(value) && value !== null && value !== undefined) ?
          value.toString() : value;

        if (v.search(/^(https?|ftp):\/\//i) > -1) {
          return v;
        }

        // This code strips any protocols from start of string
        v = (value.search(/:\/\//) > -1) ? value.split(/:\/\/(.+)?/)[1] : value;

        // Append 'http://' to start of string and return
        return (v.length) ? 'http://' + v : v;
      },
      // Convert confusable quotations marks to regular single/double quotes
      convertQuotes: function (value, attr, customValue, model) {
        if (!customValue || !_.isString(value)) {
          return value;
        }
        return value.replace(/[ʺ˝ˮ“”‟″‶〃＂]/g, '"').replace(/[`‘’]/g, '\'');
      }
    }
  };
});
