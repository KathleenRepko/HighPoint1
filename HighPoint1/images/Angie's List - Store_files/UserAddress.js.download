'use strict';

define(function (require) {
  var AL = require('al');

  /* eslint prefer-rest-params:0 */
  var Model = AL.Model.extend({
    idAttribute: 'addressId',

    parse: function parse(data, options) {
      var _links = data._links;
      if (_links && _links.self && _links.self.href) {
        this.url = _links.self.href;
      }
      return data;
    },

    save: function save() {
      return AL.Model.prototype.save.apply(this, arguments);
    },

    makePrimary: function makePrimary() {
      return this.sync('primary', this, { type: 'PUT' });
    },

    methodToUrl: function methodToUrl() {
      var userId = AL.user.get('userId') ? AL.user.get('userId') : AL.user.get('id');
      return {
        'create': AL.apiPath + '/users/' + userId + '/addresses',
        'delete': AL.apiPath + '/users/current/addresses/' + this.get('addressId'),
        'primary': AL.apiPath + '/users/current/addresses/primary/' + this.get('addressId')
      };
    },

    sync: function sync(method, model, options) {
      var opts = options || {};
      opts.url = model.methodToUrl()[method.toLowerCase()];
      return AL.Model.prototype.sync.apply(this, arguments);
    },

    validation: {
      description: {
        required: false,
        title: true,
        maxLength: 50
      },
      makePrimary: {
        required: false
      },
      addressFirstLine: {
        required: true,
        maxLength: 50,
        title: true
      },
      addressSecondLine: {
        required: false,
        maxLength: 50,
        title: true
      },
      city: {
        required: true,
        maxLength: 50,
        title: true
      },
      regionId: {
        required: true,
        msg: 'State is required'
      },
      postalCode: {
        required: true,
        maxLength: 5,
        pattern: 'postalCode'
      },
      countryId: {
        required: true,
        msg: 'Country is required'
      },
      yearBuilt: {
        required: false,
        range: [1000, 3000]
      }
    },

    sanitation: {
      description: {
        trim: true,
        compactSpace: true,
        removeEmptyString: true
      },
      makePrimary: {
        convertToBoolean: true
      },
      addressFirstLine: {
        trim: true,
        compactSpace: true
      },
      addressSecondLine: {
        trim: true,
        compactSpace: true,
        removeEmptyString: true
      },
      city: {
        trim: true,
        compactSpace: true
      },
      regionId: {
        trim: true,
        compactSpace: true
      },
      postalCode: {
        trim: true,
        compactSpace: true
      },
      countryId: {
        trim: true,
        compactSpace: true
      },
      yearBuilt: {
        convertToNumber: true
      }
    }
  });

  var Collection = AL.Collection.extend({
    model: Model,
    parse: function parse(data, options) {
      return data;
    }
  });

  return {
    Model: Model,
    Collection: Collection
  };
});